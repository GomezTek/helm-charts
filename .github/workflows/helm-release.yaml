name: Release Helm Chart

on:
  push:
    branches:
      - main
      - master
      - 'release/*'
    paths:
      - 'gtk-mesa-chart/**'
      - '.github/workflows/helm-release.yaml'
  workflow_dispatch:

env:
  CHART_DIR: gtk-mesa-chart

jobs:
  debug-info:
    runs-on: ubuntu-latest
    steps:
      - name: Debug Info
        run: |
          echo "Branch ref: ${{ github.ref }}"
          echo "Event name: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"

  release:
    runs-on: ubuntu-latest
    needs: debug-info
    if: ${{ success() }}
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Add Helm repos
        run: |
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update

      - name: Initialize gh-pages branch
        run: |
          # Store current branch name
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          
          # Check if gh-pages branch exists
          if ! git ls-remote --heads origin gh-pages | grep gh-pages > /dev/null; then
            echo "Creating gh-pages branch"
            git checkout --orphan gh-pages
            git reset --hard
            git commit --allow-empty -m "Initialize gh-pages branch"
            git push origin gh-pages
            # Return to original branch
            git checkout $CURRENT_BRANCH
          fi

      - name: Set Chart Version
        id: set_version
        run: |
          echo "Current directory: $(pwd)"
          echo "Chart directory contents:"
          ls -la ${{ env.CHART_DIR }}
          
          # Get base version from Chart.yaml
          CHART_VERSION=$(yq eval '.version' ${{ env.CHART_DIR }}/Chart.yaml)
          
          if [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
            # For release branches, append commit SHA
            SHA=$(git rev-parse --short HEAD)
            NEW_VERSION="${CHART_VERSION}-${SHA}"
          else
            # For main/master, use version as is
            NEW_VERSION="${CHART_VERSION}"
          fi
          
          echo "Setting version to: ${NEW_VERSION}"
          yq eval -i '.version = "'${NEW_VERSION}'"' ${{ env.CHART_DIR }}/Chart.yaml
          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT

      - name: Package Chart
        run: |
          helm dependency update ${{ env.CHART_DIR }}
          helm package ${{ env.CHART_DIR }}
          mkdir -p .cr-release-packages
          mv *.tgz .cr-release-packages/

      - name: Create Release
        uses: helm/chart-releaser-action@v1.5.0
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          CR_SKIP_EXISTING: true
        with:
          charts_dir: .
          config: .github/cr.yaml

      - name: Push to GHCR
        env:
          HELM_EXPERIMENTAL_OCI: 1
        run: |
          VERSION=${{ steps.set_version.outputs.version }}
          CHART_NAME=mesa
          # Convert repository owner to lowercase for GHCR
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REGISTRY=ghcr.io/${REPO_OWNER}/charts
          
          echo "Logging into GHCR..."
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io -u ${{ github.actor }} --password-stdin
          
          echo "Pushing chart ${CHART_NAME}:${VERSION} to ${REGISTRY}..."
          helm push .cr-release-packages/mesa-${VERSION}.tgz oci://${REGISTRY}
          
          echo "Successfully pushed chart to GHCR"
